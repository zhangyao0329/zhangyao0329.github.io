<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker镜像源</title>
      <link href="/2024/09/01/docker-jing-xiang/"/>
      <url>/2024/09/01/docker-jing-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker镜像源"><a href="#Docker镜像源" class="headerlink" title="Docker镜像源"></a>Docker镜像源</h1><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 创建目录</span>sudo mkdir -p /etc/docker<span class="token comment"># 复制内容，注意把其中的镜像加速地址改成你自己的</span>tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://docker.1panel.live"]}EOF<span class="token comment"># 重新加载配置</span>sudo systemctl daemon-reload<span class="token comment"># 重启Docker</span>sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看是否换源成功</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可用镜像</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//dockerpull.com</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//docker.1panel.live</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//dockerproxy.cn</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//docker.hpcloud.cloud</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>自建镜像</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//docker.dapixiu.cloudns.ch/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h2><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">yum remove docker \    docker-client \    docker-client-latest \    docker-common \    docker-latest \    docker-latest-logrotate \    docker-logrotate \    docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">yum install -y yum-utils||&lt; --- yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum makecache fastyum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker常用命令："><a href="#docker常用命令：" class="headerlink" title="docker常用命令："></a>docker常用命令：</h2><pre class="line-numbers language-none"><code class="language-none"># 启动Dockersystemctl start docker# 停止Dockersystemctl stop docker# 重启systemctl restart docker# 设置开机自启systemctl enable docker# 执行docker ps命令，如果不报错，说明安装启动成功docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 镜像源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建一个图床</title>
      <link href="/2024/09/01/da-jian-yi-ge-tu-chuang/"/>
      <url>/2024/09/01/da-jian-yi-ge-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub-PicGo-JsDelivr-打造高效免费图床详细教程"><a href="#GitHub-PicGo-JsDelivr-打造高效免费图床详细教程" class="headerlink" title="GitHub+PicGo+JsDelivr 打造高效免费图床详细教程"></a>GitHub+PicGo+JsDelivr 打造高效免费图床详细教程</h1><h2 id="为什么要使用图床呢？什么是图床？"><a href="#为什么要使用图床呢？什么是图床？" class="headerlink" title="为什么要使用图床呢？什么是图床？"></a>为什么要使用图床呢？什么是图床？</h2><p>图床是指专门用于存储图片的网络服务器。使用图床的主要原因有几点：</p><ol><li><strong>节省空间</strong>: 在网站或博客上直接存储大量图片会占用大量服务器空间，而使用图床可以将图片存储在专门的服务器上，节省自己服务器的空间。</li><li><strong>加速访问</strong>: 图床通常会有专门的内容分发网络（CDN）来加速图片的加载速度，从而提高网站的访问速度和用户体验。</li><li><strong>稳定性</strong>: 图床服务提供商通常会提供稳定的服务器和数据备份，确保图片的安全性和可靠性。</li><li><strong>方便分享</strong>: 图床通常会提供图片链接，方便用户分享图片到社交媒体、论坛等平台，而不必上传到各个平台。</li></ol><h2 id="图床的选择"><a href="#图床的选择" class="headerlink" title="图床的选择"></a>图床的选择</h2><p>推荐使用GitHub作为图床，特点是免费、稳定，有一个小缺点是国内访问速度慢，不过没关系，可以使用jsDelivr免费CDN加速。但是有时候cdn加速效果并不显著。</p><h2 id="关于jsDelivr"><a href="#关于jsDelivr" class="headerlink" title="关于jsDelivr"></a>关于jsDelivr</h2><p>jsDelivr是国外的一家优秀的公共 CDN 服务提供商，无须担心中国防火墙问题而影响使用。官网：<a href="http://www.jsdelivr.com/">http://www.jsdelivr.com/</a></p><hr><h2 id="教程开始："><a href="#教程开始：" class="headerlink" title="教程开始："></a>教程开始：</h2><ol><li>注册GitHub账号，并创建仓库。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangyao0329/tuchuang-blog/tuchuang-blog/202405131759001.png" alt="1"></p><ol start="2"><li>仓库一定要设置<strong>公开</strong>，一定！一定！一定！</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangyao0329/tuchuang-blog/tuchuang-blog/202405131759272.png" alt="2"></p><p><img src="https://cdn.jsdelivr.net/gh/zhangyao0329/tuchuang-blog/tuchuang-blog/202405131800850.png" alt="3"></p><ol start="3"><li>在 github 上点头像进入<code>settings</code> 选项。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangyao0329/tuchuang-blog/tuchuang-blog/202405131801105.png" alt="4"></p><ol start="4"><li>点左侧最下面菜单 <code>Developer settings</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangyao0329/tuchuang-blog/tuchuang-blog/202405131801004.png" alt="5"></p><ol start="5"><li>点击 Tokens (classic) 生成密钥</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangyao0329/tuchuang-blog/tuchuang-blog/202405131802706.png" alt="6"></p><ol start="6"><li>输入github密码后进入这个页面</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangyao0329/tuchuang-blog/tuchuang-blog/202405131802391.png" alt="7"></p><ol start="7"><li>在创建页面中，填写 Note 为“<strong>图床-blo</strong>g”，Expiration（过期时间）为 <strong>No expiration</strong>（永久）,也可以自定义过期时间，在下面的Select scopes（选择权限范围）如下图勾选 <strong>repo</strong>。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangyao0329/tuchuang-blog/tuchuang-blog/202405131803743.png" alt="8"></p><ol start="8"><li>最后下滑到最底部，点击 <strong>generate token</strong> 生成令牌即可（一定要记住，不要泄露）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangyao0329/tuchuang-blog/tuchuang-blog/202405131803589.png" alt="9"></p><ol start="9"><li>生成密钥</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangyao0329/tuchuang-blog/tuchuang-blog/202405131803464.png" alt="10"></p><hr><h3 id="在自己电脑上配置图床"><a href="#在自己电脑上配置图床" class="headerlink" title="在自己电脑上配置图床"></a>在自己电脑上配置图床</h3><ol><li><p>下载PicGo，地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p></li><li><p>安装和配置PicGo图床软件（一直下一步安装就可以了）</p><p>设定仓库名 – 添写 github 的 账户/仓库名<br>设定分支名 – 填写使用的分支，默认是 main<br>设定 Token – 即将上面生成的 token 填写上<br>设定储存路径 – 仓库下的子目录，按自己规划填写<br>设定自定义域名 – 选填，这里我使用了 jsdelivr cdn 加速了一下，cdn 链接格式如下:</p><pre class="line-numbers language-none"><code class="language-none">https://cdn.jsdelivr.net/gh/账户名/仓库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangyao0329/tuchuang-blog/tuchuang-blog/202405131806864.png" alt="11"></p><p><img src="https://cdn.jsdelivr.net/gh/zhangyao0329/tuchuang-blog/tuchuang-blog/202405131806601.png" alt="12"></p><h2 id="自此，教程结束。"><a href="#自此，教程结束。" class="headerlink" title="自此，教程结束。"></a>自此，教程结束。</h2>]]></content>
      
      
      <categories>
          
          <category> 图床搭建搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 图床教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客平台搭建的初衷</title>
      <link href="/2024/09/01/bo-ke-ping-tai-da-jian-de-chu-zhong/"/>
      <url>/2024/09/01/bo-ke-ping-tai-da-jian-de-chu-zhong/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在个人博客已经非常常见了，知乎， csdn， 稀土掘金，甚至不可见的朋友圈等等早已可以替代个人博客，满足日常笔记的需求，但是作为独立思考的个体，自由意志未必允许出现在公共平台，我的博客由此诞生。</p><p>一个个人博客无疑有些优点的：</p><ul><li>记录成长与反思</li><li>持续学习的动力</li><li>个人的精神家园</li></ul><h1 id="记录一些教程"><a href="#记录一些教程" class="headerlink" title="记录一些教程"></a>记录一些教程</h1><p>看心情写。。。</p><h1 id="时刻铭记上网三要素"><a href="#时刻铭记上网三要素" class="headerlink" title="时刻铭记上网三要素"></a>时刻铭记上网三要素</h1><p>不评政治 不谈宗教 不碰黄赌毒<br>龙的传人需自律</p><h1 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h1><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post "article title"</code>，新建一篇文章。</p><p>然后打开<code>\blog\source\_posts</code>的目录，可以发现下面多了一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><h1 id="文章发布"><a href="#文章发布" class="headerlink" title="文章发布"></a>文章发布</h1><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 初衷 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
